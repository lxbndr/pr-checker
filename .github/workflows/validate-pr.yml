# This is a basic workflow to help you get started with Actions

name: Validate Pull Request

on:
  pull_request:
    branches: [ '*' ]
    types: [opened, reopened, edited, synchronize, labeled, unlabeled]
    
jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Validate Branch
        uses: actions/github-script@v3
        with:
          script: |
            const branch = context.payload.pull_request.head.ref;
            const isBackstage = (function() {
              return context.payload.pull_request.labels.find(function(label) {
                return label.name == "backstage";
              }) != undefined;
            })();
            core.info("Branch: " + branch);
            core.info("Backstage: " + isBackstage);
            
            core.exportVariable("IS_BACKSTAGE", isBackstage);
            
            if (isBackstage) {
              const branchRegExp = RegExp('^([A-Za-z0-9.#/-])*$', 'g');
              const result = branchRegExp.exec(branch);
              if (result == null) {
                core.exportVariable("BRANCH_RESULT", JSON.stringify({errors: ["Branch: name doesn't match required format"]}));
              }
              else {
                core.exportVariable("BRANCH_RESULT", JSON.stringify({errors: []}));
              }
            }
            else {
              const branchRegExp = RegExp('^([a-z]+)\/(AB-[0-9]+-)*([a-z0-9]+(([\-\.])?[a-z0-9]+)*)*$', 'g');
              const result = branchRegExp.exec(branch);
              if (result != null) {
                const prefix = result[1];
                const anchor = result[2];
                const description = result[3];
                core.info("Prefix: " + prefix);
                core.info("Anchor: " + anchor);
                core.info("Descrption: " + description);

                core.exportVariable("BRANCH_PREFIX", prefix);

                if (prefix != "fix" && prefix != "feature" && prefix != "merge" && prefix != "test") {
                  core.exportVariable("BRANCH_RESULT", JSON.stringify({errors: ["Branch: prefix should be either 'fix', 'feature', 'test' or 'merge'"]}));
                }
                else if (prefix != "test" && prefix != "merge" && anchor == undefined) {
                  core.exportVariable("BRANCH_RESULT", JSON.stringify({errors: ["Branch: task anchor is required for '" + prefix + "'"]}));
                }
                else if (description == undefined) {
                  core.exportVariable("BRANCH_RESULT", JSON.stringify({errors: ["Branch: description part is required"]}));
                }
                else {
                  core.exportVariable("BRANCH_RESULT", JSON.stringify({errors: []}));
                }
              }
              else {
                core.exportVariable("BRANCH_RESULT", JSON.stringify({errors: ["Branch: name doesn't match required format"]}));
              }
            }

      - name: Validate Title
        id: validate-title
        uses: actions/github-script@v3
        with:
          script: |
            const title = context.payload.pull_request.title;
            const branchPrefix = process.env.BRANCH_PREFIX;
            const isBackstage = process.env.IS_BACKSTAGE == "true";
            if (branchPrefix == undefined || isBackstage) {
              core.exportVariable("TITLE_RESULT", JSON.stringify({errors: []}));
              return;
            }
            
            core.info("Pull request title: " + title);
            core.info("Branch prefix: " + branchPrefix);
            
            const anchorRegExp = RegExp('^((?:AB#\d+)(?:, AB#\d+){0,})', 'g');
            const result = anchorRegExp.exec(title);
            if (branchPrefix != "test" && branchPrefix != "merge" && (result == null || result[0] == "")) {
              core.exportVariable("TITLE_RESULT", JSON.stringify({errors: ["Title: one or more task anchors are required"]}));
            }
            else {
              core.exportVariable("TITLE_RESULT", JSON.stringify({errors: []}));
            }

      - uses: actions/github-script@v3
        with:
          script: |
            const branchResult = JSON.parse(process.env.BRANCH_RESULT);
            const titleResult = JSON.parse(process.env.TITLE_RESULT);
            const allErrors = branchResult.errors.concat(titleResult.errors);
            
            allErrors.forEach(function(errorDescription) {
              core.error(errorDescription);
            });
            if (allErrors.length > 0) {
              core.setFailed("Validation failed, see generated errors");
            }
